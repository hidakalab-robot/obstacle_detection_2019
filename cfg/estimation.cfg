#!/usr/bin/env python
PACKAGE = "obstacle_detection_2019"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#kalmanfilter parameter
#observe error
gen.add("observationDelta11", double_t, 0, "A double parameter", 0.0025, 0, 1)
gen.add("observationDelta22", double_t, 0, "A double parameter", 0.0025, 0, 1)
gen.add("observationDelta33", double_t, 0, "A double parameter", 0.0004, 0, 1)
gen.add("observationDelta44", double_t, 0, "A double parameter", 0.0004, 0, 1)
gen.add("observationDelta13", double_t, 0, "A double parameter", 0, 0, 1)
gen.add("observationDelta31", double_t, 0, "A double parameter", 0, 0, 1)
gen.add("observationDelta24", double_t, 0, "A double parameter", 0, 0, 1)
gen.add("observationDelta42", double_t, 0, "A double parameter", 0, 0, 1)
#model error
gen.add("predictionSigma11", double_t, 0, "A double parameter", 0.0025, 0, 1)
gen.add("predictionSigma22", double_t, 0, "A double parameter", 0.0025, 0, 1)
gen.add("predictionSigma33", double_t, 0, "A double parameter", 0.02, 0, 1)
gen.add("predictionSigma44", double_t, 0, "A double parameter", 0.02, 0, 1)
gen.add("predictionSigma13", double_t, 0, "A double parameter", 0, 0, 1)
gen.add("predictionSigma31", double_t, 0, "A double parameter", 0, 0, 1)
gen.add("predictionSigma24", double_t, 0, "A double parameter", 0, 0, 1)
gen.add("predictionSigma42", double_t, 0, "A double parameter", 0, 0, 1)
#error initalize 
gen.add("estimationSigma11", double_t, 0, "A double parameter", 0.01, 0, 1)
gen.add("estimationSigma22", double_t, 0, "A double parameter", 0.01, 0, 1)
gen.add("estimationSigma33", double_t, 0, "A double parameter", 0.09, 0, 1)
gen.add("estimationSigma44", double_t, 0, "A double parameter", 0.09, 0, 1)
gen.add("estimationSigma13", double_t, 0, "A double parameter", 0, 0, 1)
gen.add("estimationSigma31", double_t, 0, "A double parameter", 0, 0, 1)
gen.add("estimationSigma24", double_t, 0, "A double parameter", 0, 0, 1)
gen.add("estimationSigma42", double_t, 0, "A double parameter", 0, 0, 1)
#
# sample
# gen.add("str_param", str_t, 0, "A string parameter", "Hello World")
# gen.add("bool_param", bool_t, 0, "A Boolean parameter", True)
# size_enum = gen.enum([ gen.const("Small", int_t, 0, "A small constant"),
#                   gen.const("Medium", int_t, 1, "A medium constant"),
#                   gen.const("Large", int_t, 2, "A large constant"),
#                   gen.const("ExtraLarge", int_t, 3, "An extra large constant") ],
#                   "An enum to set size")
# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "obstacle_detection_2019", "estimation"))